{"remainingRequest":"/my/dev/nodejs/jiemen/WebAdmin/node_modules/babel-loader/lib/index.js!/my/dev/nodejs/jiemen/WebAdmin/node_modules/eslint-loader/index.js??ref--13-0!/my/dev/nodejs/jiemen/WebAdmin/src/util/api.js","dependencies":[{"path":"/my/dev/nodejs/jiemen/WebAdmin/src/util/api.js","mtime":1545122118929},{"path":"/my/dev/nodejs/jiemen/WebAdmin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/my/dev/nodejs/jiemen/WebAdmin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/my/dev/nodejs/jiemen/WebAdmin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import http from './http';\nimport config from '../config';\nvar archiveSize = 1;\nexport default {\n  archive: function archive(index, func) {\n    http.get(\"/archive/page/\".concat(index, \"_\").concat(archiveSize)).then(function (resp) {\n      func(resp.data.data.content[0]);\n    });\n  },\n  category: function category(func) {\n    http.get(\"/category/page/1_10000\").then(function (resp) {\n      func(resp.data.data.content);\n    });\n  },\n  url: function url(uri) {\n    return config.baseURL + uri;\n  }\n};",{"version":3,"sources":["/my/dev/nodejs/jiemen/WebAdmin/src/util/api.js"],"names":["http","config","archiveSize","archive","index","func","get","then","resp","data","content","category","url","uri","baseURL"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,IAAMC,WAAW,GAAG,CAApB;AAEA,eAAe;AACXC,EAAAA,OADW,mBACHC,KADG,EACIC,IADJ,EACS;AAChBL,IAAAA,IAAI,CAACM,GAAL,yBAA0BF,KAA1B,cAAmCF,WAAnC,GACKK,IADL,CACU,UAASC,IAAT,EAAc;AAChBH,MAAAA,IAAI,CAACG,IAAI,CAACC,IAAL,CAAUA,IAAV,CAAeC,OAAf,CAAuB,CAAvB,CAAD,CAAJ;AACH,KAHL;AAIH,GANU;AAOXC,EAAAA,QAPW,oBAOFN,IAPE,EAOG;AACVL,IAAAA,IAAI,CAACM,GAAL,2BACKC,IADL,CACU,UAASC,IAAT,EAAc;AAChBH,MAAAA,IAAI,CAACG,IAAI,CAACC,IAAL,CAAUA,IAAV,CAAeC,OAAhB,CAAJ;AACH,KAHL;AAIH,GAZU;AAaXE,EAAAA,GAbW,eAaPC,GAbO,EAaH;AACJ,WAAOZ,MAAM,CAACa,OAAP,GAAiBD,GAAxB;AACH;AAfU,CAAf","sourcesContent":["import http from './http';\nimport config from '../config';\n\nconst archiveSize = 1;\n\nexport default {\n    archive(index, func){\n        http.get(`/archive/page/${index}_${archiveSize}`)\n            .then(function(resp){\n                func(resp.data.data.content[0]);\n            })\n    },\n    category(func){\n        http.get(`/category/page/1_10000`)\n            .then(function(resp){\n                func(resp.data.data.content);\n            })\n    },\n    url(uri){\n        return config.baseURL + uri;\n    }\n}"]}]}