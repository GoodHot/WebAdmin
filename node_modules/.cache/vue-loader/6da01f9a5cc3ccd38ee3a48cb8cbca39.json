{"remainingRequest":"/my/dev/nodejs/jiemen/WebAdmin/node_modules/vue-loader/lib/index.js??vue-loader-options!/my/dev/nodejs/jiemen/WebAdmin/src/components/Category.vue?vue&type=style&index=0&id=41382e2e&scoped=true&lang=css&","dependencies":[{"path":"/my/dev/nodejs/jiemen/WebAdmin/src/components/Category.vue","mtime":1544756709769},{"path":"/my/dev/nodejs/jiemen/WebAdmin/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/my/dev/nodejs/jiemen/WebAdmin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/my/dev/nodejs/jiemen/WebAdmin/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/my/dev/nodejs/jiemen/WebAdmin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/my/dev/nodejs/jiemen/WebAdmin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.editable-row-operations a {\n  margin-right: 8px;\n}\n",{"version":3,"sources":["Category.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwMA;AACA;AACA","file":"Category.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <a-button class=\"editable-add-btn\" @click=\"showModal\">ÂàõÂª∫Êñ∞ÂàÜÁ±ª</a-button><br><br>\n        <a-table :columns=\"columns\" :dataSource=\"data\" bordered :pagination=\"false\">\n        <template v-for=\"col in ['name', 'sort', 'icon', 'isShow', 'remark']\" :slot=\"col\" slot-scope=\"record\">\n        <div>\n            <a-input\n            v-if=\"record.editable\"\n            style=\"margin: -5px 0\"\n            :value=\"text\"\n            @change=\"e => handleChange(e.target.value, record.key, col)\"\n            />\n            <template v-else>{{text}}</template>\n        </div>\n        </template>\n        <template slot=\"operation\" slot-scope=\"record\">\n        <div class='editable-row-operations'>\n            <span v-if=\"record.editable\">\n            <a @click=\"() => save(record.key)\">Save</a>\n            <a-popconfirm title='Sure to cancel?' @confirm=\"() => cancel(record.key)\">\n                <a>Cancel</a>\n            </a-popconfirm>\n            </span>\n            <span v-else>\n            <a @click=\"() => edit(record.key)\">Edit</a>\n            </span>\n        </div>\n        </template>\n        <template slot=\"isShow\" slot-scope=\"record\">\n        <div>\n            <span v-if=\"record.isShow\">\n            <a-badge status=\"success\" text=\"ÊòæÁ§∫\" />\n            </span>\n            <span v-else>\n            <a-badge status=\"error\" text=\"ÈöêËóè\" />\n            </span>\n        </div>\n        </template>\n    </a-table>\n    <a-modal\n      title=\"Title\"\n      :visible=\"visible\"\n      @ok=\"handleOk\"\n      :confirmLoading=\"confirmLoading\"\n      @cancel=\"handleCancel\"\n    >\n      <p>\n          <a-form @submit=\"handleSubmit\" :form=\"form\">\n            <a-form-item\n                v-bind=\"formItemLayout\"\n                label='E-mail'\n            >\n                <a-input\n                v-decorator=\"[\n                    'email',\n                    {\n                    rules: [{\n                        type: 'email', message: 'The input is not valid E-mail!',\n                    }, {\n                        required: true, message: 'Please input your E-mail!',\n                    }]\n                    }\n                ]\"\n                />\n            </a-form-item>\n            <a-form-item\n                v-bind=\"formItemLayout\"\n                label='Password'\n            >\n                <a-input\n                v-decorator=\"[\n                    'password',\n                    {\n                    rules: [{\n                        required: true, message: 'Please input your password!',\n                    }, {\n                        validator: this.validateToNextPassword,\n                    }],\n                    }\n                ]\"\n                type='password'\n                />\n            </a-form-item>\n            <a-form-item\n                v-bind=\"formItemLayout\"\n                label='Confirm Password'\n            >\n                <a-input\n                v-decorator=\"[\n                    'confirm',\n                    {\n                    rules: [{\n                        required: true, message: 'Please confirm your password!',\n                    }, {\n                        validator: compareToFirstPassword,\n                    }],\n                    }\n                ]\"\n                type='password'\n                @blur=\"handleConfirmBlur\"\n                />\n            </a-form-item>\n            </a-form>\n      </p>\n    </a-modal>\n    </div>\n</template>\n<script>\nconst columns = [{\n  title: 'ÂêçÁß∞',\n  dataIndex: 'name',\n  width: '15%',\n  scopedSlots: { customRender: 'name' },\n}, {\n  title: 'ÊéíÂ∫è',\n  dataIndex: 'sort',\n  width: '10%',\n  scopedSlots: { customRender: 'sort' },\n}, {\n  title: 'ÂõæÊ†á',\n  dataIndex: 'icon',\n  width: '10%',\n  scopedSlots: { customRender: 'icon' },\n}, {\n  title: 'ÊòæÁ§∫',\n  dataIndex: 'isShow',\n  width: '10%',\n  scopedSlots: { customRender: 'isShow' },\n}, {\n  title: 'Â§áÊ≥®',\n  dataIndex: 'remark',\n  scopedSlots: { customRender: 'remark' },\n}, {\n  title: 'operation',\n  dataIndex: 'operation',\n  scopedSlots: { customRender: 'operation' },\n}]\n\nconst data = []\nfor (let i = 0; i < 15; i++) {\n  data.push({\n    key: i.toString(),\n    name: `calc ${i}`,\n    sort: i * 10,\n    icon: `üòã`,\n    isShow: i%2 == 0,\n    remark: `remark. ${i}`\n  })\n}\nexport default {\n  data () {\n    this.cacheData = data.map(item => ({ ...item }))\n    return {\n      data,\n      columns,\n      visible: false,\n    }\n  },\n  methods: {\n    showModal() {\n      this.visible = true\n    },\n    handleChange (value, key, column) {\n      const newData = [...this.data]\n      const target = newData.filter(item => key === item.key)[0]\n      if (target) {\n        target[column] = value\n        this.data = newData\n      }\n    },\n    edit (key) {\n      const newData = [...this.data]\n      const target = newData.filter(item => key === item.key)[0]\n      if (target) {\n        target.editable = true\n        this.data = newData\n      }\n    },\n    save (key) {\n      const newData = [...this.data]\n      const target = newData.filter(item => key === item.key)[0]\n      if (target) {\n        delete target.editable\n        this.data = newData\n        this.cacheData = newData.map(item => ({ ...item }))\n      }\n    },\n    cancel (key) {\n      const newData = [...this.data]\n      const target = newData.filter(item => key === item.key)[0]\n      if (target) {\n        Object.assign(target, this.cacheData.filter(item => key === item.key)[0])\n        delete target.editable\n        this.data = newData\n      }\n    },\n  },\n}\n</script>\n<style scoped>\n.editable-row-operations a {\n  margin-right: 8px;\n}\n</style>"]}]}